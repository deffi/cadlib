Next:
  * 2D objects

Object:
  * [Medium] Assembly (Part) objects
             Idea: Assembly is an Object; Object has a render() that returns an object or a CSG; primitives' render()
             returns self
  * [Medium] larger, smaller
             Since we can't enlarge an assembly without rendering it first, we may need to defer enlarging to
             render-time by adding an Enlarge class.
  * [Medium] Anchors
             Idea:
                 wheel = Wheel(2).center.at(car.front_left_wheel)
  * [Medium] center flag (and use in examples where appropriate)
             Probably better: .center() which transforms to the center
             Probably even better: use the anchor mechanism
  * [Low]    Frustum: generate from
               * base/tip/base_radius/cap_radius
               * base/tip/base_radius/length
  * [Low]    Shape (2-dimensional object) and associated primitives
  * [Low]    Investigate part/hole
               * Are we supposed to do Pipe+Hole or Pipe-Hole?
               * Can we do Block - (Pipe +- Hole)?
               * Is Hole * Object defined?
  * [Low]    Maybe Object classes should not do the conversion to number/vector
             but instead accept only valid numbers/vectors, and the conversion
             be done in the generators

Primitives:
  * [Low]    Plane: through point

Transform:
  * [Medium] RotateXyz -> RotateAxes
  * [Medium] rotate generator: Xyz -> Axes
  * [Medium] Should we have a ScaleAlongAxis and ScaleAroundAxis?
  * [Low]    Scale around (instead of along) axis?
             Maybe: scale(axis, along, around)
             Or, idea: scale(factor, around = (point or line))
             But we need the around parameter to specify a scale origin?
  * [Low]    Scaling (XYZ and along a vector): specify the fixed point/offset
  * [Low]    arrange objects in a grid (from list, or factory)
  * [Low]    transform generator: axis_angle (direction/magnitude)
  * [Low]    Non-chained inverse of RotateYpr and RotateXyz
  * [Low]    mirror(along which axis and which point/offset)
  * [Low]    class MatrixTransform
  * [Low]    Merge .up(1).right(2) into a single Translate([2, 0, 1])? Dito for YPR.
  * [Low]    Clean up complex generators, maybe use a generic dispatch mechanism
  * [Low]    Scale: negative values should be translated to mirror for OpenSCAD
             (OpenSCAD does not allow negative scales), or do not allow negative
             scale factors
  * [Low]    Exponentiation for transforms
  * [Low]    Empty-chained * object should be object, not chained

CSG:
  * [Medium] Auto-enlarge subtrahend for difference
  * [Low]    Make it so that a-(b+c) == (a-b)-c. Two options:
               * Difference always has a single subtrahend, which is an Object or a Union
                   * This is probably better
               * When subtracting a union, extract its children (must also be done for Object - Union)
             Also, (a-b)-c should not result in a nested difference.
  * [Low]    Can we make Union and Intersection independent of the order, so that a+b == b+a?
               * We could use a set instead of a list, or we could convert the list to a set for comparison. This would
                 require a hash method
               * We could manually compare the list elements, but that would be in O(n^2)
  * [Low]    Empty-union + object should be object, not union

Scad:
  * [Low]    In comments, simplify vectors (X, 2*X, -X, -2*X)
  * [Low]    Remove union when implicit (e. g. in translate, or from the second one in difference)
  * [Low]    We should be able to compare SCAD objects independent of union/intersection order, so we can write unit
             tests for part/hole
  * [Low]    Remove null translates/scales/rotates (e. g. Plane(Z, 0))
  * [Low]    Render with SCAD function: rotate_from_to, Plane, Layer. This will make it possible to use symblic
             constants
  * [Low]    Modifiers: %background, #debug, !root, *disable
  * [Low]    Colors (RGBA)
  * [Low]    In the scad representation of a RotateYpr, the individual rotations
             should have comments "Yaw", "Pitch", and "Roll". Since the
             RotateYpr is converted to an equivalent Chained, this will probably
             require comments for Objects.
  * [Low]    ScadObject.__init__ should reject everthing except None for
             parameters and keyword parameters if id is None. But that means the
             parameters and keyword parameters have to be stored without
             converting to [] because they are used to construct new
             ScadObjects, for example in comment().

Model:
  * [Low]    Name for transforms and objects - show in tree representation and as comment in SCAD code
  * [Low]    keep flag for transforms and CSG
               * Will not merge
  * [Low]    use_named flag for transforms and objects
               * Will not merge
               * Will write an SCAD module and be referenced by name
  * [Low]    SymbolicConstant for parametric SCAD files
               * Add symbol arithmetic classes
               * Allow in Matrix/Vector

Tests:
  * [Low]    Primitives (object and transform): test negative numbers
  * [Low]    Pass empty or wrong-size vectors, must fail (transform primitives
             and object primitives)
  * [Low]    The almost equal failure message should show the whole list or
             Matrix, not just the value that caused the failure
  * [Low]    assertNotAlwaysEqual with special-value handling
  * [Low]    assertNotEqual with special-value handling

Util:

General:
  * [Low]    Consistent order: Union, Intersection, Difference (+, *, -)

Library:

Documentation:
  * [Medium] Better readme file and project description
               * It's more of a CAD library that can render to SCAD than an SCAD
                 front-end
               * There are other libraries that do the same
               * Unique features: re-usable transforms, anchors, saves typing,
                 larger/smaller (to prevent coincident faces), SVG reading,
                 commented output, symbolic variables
                 Most features are TBD.
  * [Medium] Translate takes a vector, but ScaleAxes and RotateXyz take single
             values. That's because it's not a vector. But you'll probably want
             to use the generator functions anyway.
  * [Medium] Docstrings
               * object/transformed, object/primitives/*
               * csg/*
               * transform/chained, transform/transform, transform/primitives/*
               * scad/*
  * [Medium] Generator signatures are different for objects and transforms.
